// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Page Detected page from OCR.
// swagger:model Page
type Page struct {

	// List of blocks of text, images etc on this page.
	Blocks []*Block `json:"blocks,omitempty"`

	// Page height in pixels.
	Height int64 `json:"height,omitempty"`

	// Additional information detected on the page.
	Property *TextProperty `json:"property,omitempty"`

	// Page width in pixels.
	Width int64 `json:"width,omitempty"`
}

// Validate validates this page
func (m *Page) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlocks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperty(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Page) validateBlocks(formats strfmt.Registry) error {

	if swag.IsZero(m.Blocks) { // not required
		return nil
	}

	for i := 0; i < len(m.Blocks); i++ {

		if swag.IsZero(m.Blocks[i]) { // not required
			continue
		}

		if m.Blocks[i] != nil {

			if err := m.Blocks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blocks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Page) validateProperty(formats strfmt.Registry) error {

	if swag.IsZero(m.Property) { // not required
		return nil
	}

	if m.Property != nil {

		if err := m.Property.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("property")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Page) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Page) UnmarshalBinary(b []byte) error {
	var res Page
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
