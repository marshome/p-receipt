// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TextAnnotation TextAnnotation contains a structured representation of OCR extracted text.
// The hierarchy of an OCR extracted text structure is like this:
//     TextAnnotation -> Page -> Block -> Paragraph -> Word -> Symbol
// Each structural component, starting from Page, may further have their own
// properties. Properties describe detected languages, breaks etc.. Please
// refer to the google.cloud.vision.v1.TextAnnotation.TextProperty message
// definition below for more detail.
// swagger:model TextAnnotation
type TextAnnotation struct {

	// List of pages detected by OCR.
	Pages []*Page `json:"pages,omitempty"`

	// UTF-8 text detected on the pages.
	Text string `json:"text,omitempty"`
}

// Validate validates this text annotation
func (m *TextAnnotation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextAnnotation) validatePages(formats strfmt.Registry) error {

	if swag.IsZero(m.Pages) { // not required
		return nil
	}

	for i := 0; i < len(m.Pages); i++ {

		if swag.IsZero(m.Pages[i]) { // not required
			continue
		}

		if m.Pages[i] != nil {

			if err := m.Pages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextAnnotation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextAnnotation) UnmarshalBinary(b []byte) error {
	var res TextAnnotation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
