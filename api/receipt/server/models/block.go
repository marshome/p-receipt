// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Block Logical element on the page.
// swagger:model Block
type Block struct {

	// Detected block type (text, image etc) for this block.
	BlockType string `json:"blockType,omitempty"`

	// The bounding box for the block.
	// The vertices are in the order of top-left, top-right, bottom-right,
	// bottom-left. When a rotation of the bounding box is detected the rotation
	// is represented as around the top-left corner as defined when the text is
	// read in the 'natural' orientation.
	// For example:
	//   * when the text is horizontal it might look like:
	//      0----1
	//      |    |
	//      3----2
	//   * when it's rotated 180 degrees around the top-left corner it becomes:
	//      2----3
	//      |    |
	//      1----0
	//   and the vertice order will still be (0, 1, 2, 3).
	BoundingBox *BoundingPoly `json:"boundingBox,omitempty"`

	// List of paragraphs in this block (if this blocks is of type text).
	Paragraphs []*Paragraph `json:"paragraphs,omitempty"`

	// Additional information detected for the block.
	Property *TextProperty `json:"property,omitempty"`
}

// Validate validates this block
func (m *Block) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoundingBox(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParagraphs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperty(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Block) validateBoundingBox(formats strfmt.Registry) error {

	if swag.IsZero(m.BoundingBox) { // not required
		return nil
	}

	if m.BoundingBox != nil {

		if err := m.BoundingBox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boundingBox")
			}
			return err
		}
	}

	return nil
}

func (m *Block) validateParagraphs(formats strfmt.Registry) error {

	if swag.IsZero(m.Paragraphs) { // not required
		return nil
	}

	for i := 0; i < len(m.Paragraphs); i++ {

		if swag.IsZero(m.Paragraphs[i]) { // not required
			continue
		}

		if m.Paragraphs[i] != nil {

			if err := m.Paragraphs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paragraphs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Block) validateProperty(formats strfmt.Registry) error {

	if swag.IsZero(m.Property) { // not required
		return nil
	}

	if m.Property != nil {

		if err := m.Property.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("property")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Block) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Block) UnmarshalBinary(b []byte) error {
	var res Block
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
