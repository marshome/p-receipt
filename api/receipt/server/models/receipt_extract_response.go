// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReceiptExtractResponse receipt extract response
// swagger:model ReceiptExtractResponse
type ReceiptExtractResponse struct {

	// Text annotation
	// Required: true
	FullTextAnnotation *TextAnnotation `json:"fullTextAnnotation"`

	// Receipt info
	// Required: true
	ReceiptInfo *ReceiptInfo `json:"receiptInfo"`
}

// Validate validates this receipt extract response
func (m *ReceiptExtractResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFullTextAnnotation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReceiptInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReceiptExtractResponse) validateFullTextAnnotation(formats strfmt.Registry) error {

	if err := validate.Required("fullTextAnnotation", "body", m.FullTextAnnotation); err != nil {
		return err
	}

	if m.FullTextAnnotation != nil {

		if err := m.FullTextAnnotation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullTextAnnotation")
			}
			return err
		}
	}

	return nil
}

func (m *ReceiptExtractResponse) validateReceiptInfo(formats strfmt.Registry) error {

	if err := validate.Required("receiptInfo", "body", m.ReceiptInfo); err != nil {
		return err
	}

	if m.ReceiptInfo != nil {

		if err := m.ReceiptInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiptInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReceiptExtractResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReceiptExtractResponse) UnmarshalBinary(b []byte) error {
	var res ReceiptExtractResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
